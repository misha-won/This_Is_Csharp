// 6.6 출력 전용 매개변수
// 메서드의 선언부와 호출부에서 매개변수 앞에 out 키워드를 붙인다.

// ref 대신 out을 사용하는 이유

// 1. ref에 없는 안전장치가 있다.
// ref 키워드를 이용하여 매개변수를 넘기는 경우, 메서드가 해당 매개변수에 결과를 저장하지 않아도
// 컴파일러는 아무런 경고를 하지 않는다. 이와 달리, out 키워드를 이용하여 매개변수를 넘길 때는
// 메서드가 해당 매개변수에 결과를 저장하지 않으면 컴파일러가 에러 메시지를 출력한다.

// 2. 초기화하지 않은 지역 변수를 메서드의 out 매개변수로 넘길 수 있다.
// out 키워드를 이용하면, 컴파일러가 호출당하는 메서드에서 그 지역 변수를 할당할 것을 보장한다.

// ※ 컴파일러를 통해 결과를 할당하지 않는 버그가 만들어질 가능성을 제거할 수 있다면 그 방법을
// 사용해야 한다. 런타임에 발생하는 버그는 컴파일 타임에 발생하는 버그보다 훨씬 잡기가 어렵기
// 때문이다(컴파일 에러는 어느 곳에 문제가 있는지 컴파일러가 정확하게 알려 주지만, 런타임 버그는
// 프로그래머의 논리력으로 추적해야 한다. 같은 문제라면 기계의 도움을 받을 수 있는 쪽이 훨씬 쉽다).

// ※ 출력 전용 매개변수는 메서드를 호출하기 전에 미리 선언할 필요가 없다!
// 호출할 때 매개변수 목록 안에서 즉석으로 선언하면 된다.

namespace _06_UsingOut
{
    internal class Program
    {
        static void Divide(int a, int b, out int quotient, out int remainder)
        {
            quotient = a / b;
            remainder = a % b;
        }

        static void Main(string[] args)
        {
            int a = 20;
            int b = 3;
            // int c;
            // int d;

            Divide(a, b, out int c, out int d);
            Console.WriteLine($"{a} / {b} = {c}");
            Console.WriteLine($"{a} % {b} = {d}");
            
            // 20 / 3 = 6
            // 20 % 3 = 2
        }
    }
}
