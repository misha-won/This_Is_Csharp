// Chapter 06 메서드로 코드 간추리기

// 이 장의 핵심 개념
// - 메서드가 무엇인지, 어떤 구조로 만들어지는지 이해합니다.
// - 메서드의 결과를 반환하는 return 문을 이해합니다.
// - 매개변수의 역할과 기능을 이해합니다.
// - 메서드에게 매개변수를 전달하는 여러 방법을 이해합니다.
// - 메서드 오버로딩을 이해합니다.
// - 알아 두면 편리한 매개변수 옵션의 사용법을 익힙니다.

// 이 장의 학습 흐름
// 메서드 알아 보기 > return > 매개변수와 인자 > 참조에 의한 매개변수 전달 > 출력 전용 매개변수
// > 메서드 오버로딩 > 가변 개수의 인수 > 명명된 인수 > 선택된 인수

// 6.1 메서드란?

// 객체 지향 프로그래밍 언어에서 사용하는 용어이다.
// (C와 C++에서는 함수(Function)라 불렀고 파스칼에서는 프로시저(Procedure)라고 불렀다.)

// 메서드(Method)는 일련의 코드를 하나의 이름 아래 묶은 것이다.
// 이렇게 묶은 코드는 메서드의 이름을 불러 주는 것만으로 실행할 수 있다(메서드 호출(call)).

// 메서드의 선언 형식

// class 클래스_이름
// {
//     한정자 반환_형식 메서드_이름(매개변수_목록)
//     {
//         실행하려는_코드_1;
//         실행하려는_코드_2;
//         ...
//         실행하려는_코드_n;
//         
//         return 메서드_결과; <- 메서드의 반환 형식과 일치해야 한다.
//     }
// }

// 메서드와 객체 지향 프로그래밍

// 메서드가 함수, 프로시저, 서브루틴 등과 다른 점은 바로 클래스 안에 존재한다는 것이다.
// 객체 지향 프로그래밍에서는 코드 내 모든 것을 객체로 표현한다.
// 각 객체는 자신만의 속성(데이터)과 기능(메서드)을 가지고 있는데,
// 클래스가 바로 이 객체를 위한 청사진을 제공한다.
// 그래서 메서드가 클래스 안에서 선언되는 것이다.

// 매개변수(Parameter)와 반환 형식(Return Type)
// - 매개변수  : 제품을 만들기 위해 기계(메서드)에 집어넣는 재료
// - 메서드    : 입력된 재료(매개변수)를 바탕으로 제품을 만들어내는 기계
// - 반환 형식 : 기계가 만들어낸 제품의 규격
// - 인수      : 호출자가 매개변수에 넘기는 값

// 메서드 호출 시 일어나는 프로그램 흐름의 변화
// 1. CLR이 코드를 차례대로 실행하다가 메서드를 호출한다.
// 2. 해당 메서드로 이동한다.
// 3. 그 메서드가 담고 있는 코드를 차례대로 수행한다.
// 4. 메서드 블록의 끝에 도달하거나 return 문을 만나면 메서드가 종결된다.
// 5. 원래의 프로그램 흐름으로 돌아와 계속 실행한다.

namespace _01_Calculator
{
    class Calculator
    {
        public static int Plus(int a, int b)
        {
            return a + b;
        }

        public static int Minus(int a, int b)
        {
            return a - b;
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            int result = Calculator.Plus(3, 4);
            Console.WriteLine(result);  // 7

            result = Calculator.Minus(5, 2);
            Console.WriteLine(result);  // 3
        }
    }
}

// static 한정자 : 메서드나 필드가 클래스의 인스턴스가 아닌 클래스 자체에 소속되도록 지정한다.
