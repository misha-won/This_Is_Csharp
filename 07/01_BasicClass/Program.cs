// Chapter 07 클래스

// 이 장의 핵심 개념
// - 객체 지향 프로그래밍과 클래스의 정의를 이해합니다.
// - 클래스를 선언하고 객체를 생성하는 방법을 익힙니다.
// - 인스턴스 멤버와 정적 멤버의 차이를 이해합니다.
// - 클래스 멤버를 보호하는 접근 한정자의 종류와 역할을 이해합니다.
// - 클래스 간 상속을 이해합니다.
// - 메서드 오버라이딩과 다형성을 이해합니다.

// 이 장의 학습 흐름
// 객체 지향 프로그래밍과 클래스 > 클래스의 선언과 객체의 생성 > 정적 필드와 메서드 > 객체 복사하기
// > this 키워드 > 접근 한정자로 공개 수준 결정하기 > 상속으로 코드 재활용하기
// > 기반 클래스와 파생 클래스 사이의 형식 변환 > 오버라이딩과 다형성 > 메서드 숨기기
// > 오버라이딩 봉인하기 > 중첩 클래스와 분할 클래스 > 확장 메서드 > 구조체

// ==================================================

// 7.1 객체 지향 프로그래밍과 클래스

// 객체 지향 프로그래밍(Object Oriented Programming, OOP)
// 코드 내 모든 것을 객체로 표현하려는 프로그래밍 패러다임을 뜻한다.

// 객체(Object)란?
// 객체는 세상의 모든 것을 지칭하는 단어이다(도란 무엇인가도 아니고...).
// 객체에서 중요한 것은 속성(크기, 종류, 파일 생성 날짜 등)과 기능(수정, 삭제 등)이다.
// 그리고 C#에서 속성과 기능은 각각 데이터와 메서드로 표현할 수 있다.
// 다시 말해, 객체는 데이터와 메서드로 이루어진다.

// 클래스(Class)란?
// 객체를 만들기 위한 청사진이다.
// 클래스가 자동차 설계도라면, 객체는 생산된 실제 자동차라고 할 수 있다.
// 설계도는 자동차가 어떤 속성과 어떤 기능을 가져야 하는지를 지정하고, 속성 중에 변경 가능한 것과
// 변경 불가능한 것을 결정한다.
// 설계도는 실체를 가지지 않지만, 공장에서 제작된 자동차는 실체가 있어 도로나 주차 공간을 차지한다.
// 

namespace _01_BasicClass
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
